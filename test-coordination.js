#!/usr/bin/env node

/**
 * Teste do Sistema de Coordena√ß√£o Core
 * 
 * Este script demonstra o funcionamento da integra√ß√£o entre
 * TaskMaster e Sequential Thinking atrav√©s do Coordinator.
 */

const { TaskMasterCoordinator } = require('./src/core/coordinator');

async function testCoordination() {
    console.log('üöÄ Iniciando teste do Sistema de Coordena√ß√£o Core...\n');
    
    const coordinator = new TaskMasterCoordinator();
    
    try {
        // Teste 1: Inicializa√ß√£o
        console.log('üìã Teste 1: Inicializa√ß√£o do Coordinator');
        const initResult = await coordinator.initialize();
        console.log('‚úÖ Resultado:', initResult);
        console.log('');
        
        // Teste 2: Decis√£o de Sistema
        console.log('ü§î Teste 2: Decis√£o de Sistema');
        const decision = await coordinator.decideSystem('analyze-complex-task', {
            complexity: 8,
            hasSubtasks: false,
            requiresThinking: true
        });
        console.log('‚úÖ Decis√£o:', decision);
        console.log('');
        
        // Teste 3: Comando H√≠brido - An√°lise e Planejamento
        console.log('üîÑ Teste 3: Comando H√≠brido - An√°lise e Planejamento');
        const analysisResult = await coordinator.executeHybridCommand('analyze-and-plan', {
            problem: 'Implementar sistema de autentica√ß√£o seguro',
            requirements: 'JWT, OAuth, 2FA, rate limiting, audit logs'
        });
        console.log('‚úÖ Resultado da an√°lise:', {
            success: analysisResult.success,
            hasAnalysis: !!analysisResult.analysis,
            hasPlanning: !!analysisResult.planning,
            nextStepsCount: analysisResult.nextSteps?.length || 0
        });
        console.log('');
        
        // Teste 4: Pr√≥xima Tarefa Inteligente
        console.log('üéØ Teste 4: Pr√≥xima Tarefa Inteligente');
        const smartTaskResult = await coordinator.executeHybridCommand('smart-next-task', {});
        console.log('‚úÖ Resultado:', {
            success: smartTaskResult.success,
            hasTask: !!smartTaskResult.task,
            hasAnalysis: !!smartTaskResult.analysis,
            hasRecommendation: !!smartTaskResult.recommendation
        });
        console.log('');
        
        // Teste 5: Expans√£o com Thinking
        console.log('üß† Teste 5: Expans√£o com Sequential Thinking');
        const expansionResult = await coordinator.executeHybridCommand('expand-with-thinking', {
            taskId: 3
        });
        console.log('‚úÖ Resultado:', {
            success: expansionResult.success,
            hasOriginalTask: !!expansionResult.originalTask,
            hasAnalysis: !!expansionResult.analysis,
            hasExpansion: !!expansionResult.expansion
        });
        console.log('');
        
        // Teste 6: Status do Sistema
        console.log('üìä Teste 6: Status do Sistema');
        const status = coordinator.getStatus();
        console.log('‚úÖ Status:', status);
        console.log('');
        
        // Resumo dos Testes
        console.log('üìà RESUMO DOS TESTES');
        console.log('===================');
        console.log('‚úÖ Inicializa√ß√£o: OK');
        console.log('‚úÖ Decis√£o de Sistema: OK');
        console.log('‚úÖ An√°lise e Planejamento: OK');
        console.log('‚úÖ Pr√≥xima Tarefa Inteligente: OK');
        console.log('‚úÖ Expans√£o com Thinking: OK');
        console.log('‚úÖ Status do Sistema: OK');
        console.log('');
        console.log('üéâ Todos os testes passaram! Sistema de Coordena√ß√£o Core funcionando.');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error);
        return false;
    }
}

// Executa os testes se o script for chamado diretamente
if (require.main === module) {
    testCoordination()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå Erro fatal:', error);
            process.exit(1);
        });
}

module.exports = { testCoordination };
