#!/usr/bin/env node

/**
 * Teste do Advanced Rules Engine
 * 
 * Testa as funcionalidades avan√ßadas do sistema de regras incluindo:
 * - Scoring multi-dimensional
 * - Prioriza√ß√£o avan√ßada
 * - Aprendizado de padr√µes
 * - M√©tricas de performance
 */

const { AdvancedRulesEngine } = require('./src/core/rules-engine-advanced');

async function testAdvancedRules() {
    console.log('üß† Iniciando teste do Advanced Rules Engine...\n');
    
    const engine = new AdvancedRulesEngine();
    
    try {
        // Teste 1: Decis√£o baseada em complexidade baixa
        console.log('üìä Teste 1: Opera√ß√£o de baixa complexidade');
        const lowComplexityDecision = await engine.evaluate('add-task', {
            complexity: 2,
            type: 'task_organization',
            description: 'Criar uma tarefa simples de organiza√ß√£o'
        });
        console.log('‚úÖ Resultado:', {
            system: lowComplexityDecision.system,
            confidence: lowComplexityDecision.confidence.toFixed(2),
            reasoning: lowComplexityDecision.reasoning
        });
        console.log('');

        // Teste 2: Decis√£o baseada em alta complexidade
        console.log('üî¨ Teste 2: Opera√ß√£o de alta complexidade');
        const highComplexityDecision = await engine.evaluate('analyze-complex-problem', {
            complexity: 9,
            type: 'problem_analysis',
            description: 'Analisar problema complexo que requer racioc√≠nio profundo',
            hasDeadline: true,
            dependencies: ['task1', 'task2', 'task3', 'task4']
        });
        console.log('‚úÖ Resultado:', {
            system: highComplexityDecision.system,
            confidence: highComplexityDecision.confidence.toFixed(2),
            reasoning: highComplexityDecision.reasoning,
            hasWorkflow: !!highComplexityDecision.workflow
        });
        console.log('');

        // Teste 3: Opera√ß√£o h√≠brida expl√≠cita
        console.log('üîÑ Teste 3: Opera√ß√£o h√≠brida expl√≠cita');
        const hybridDecision = await engine.evaluate('analyze-and-plan', {
            complexity: 6,
            type: 'comprehensive_analysis',
            description: 'An√°lise completa seguida de planejamento estruturado'
        });
        console.log('‚úÖ Resultado:', {
            system: hybridDecision.system,
            confidence: hybridDecision.confidence.toFixed(2),
            workflow: hybridDecision.workflow?.slice(0, 3) // Primeiros 3 passos
        });
        console.log('');

        // Teste 4: Prioriza√ß√£o multi-dimensional
        console.log('‚ö° Teste 4: Prioriza√ß√£o multi-dimensional');
        const priorityDecision = await engine.evaluate('urgent-task', {
            complexity: 5,
            urgency: 5,
            impact: 4,
            resources: 3,
            dependencies: 2,
            priority: 'high'
        });
        console.log('‚úÖ Resultado:', {
            system: priorityDecision.system,
            confidence: priorityDecision.confidence.toFixed(2),
            scores: Object.fromEntries(
                Object.entries(priorityDecision.scores).map(([k, v]) => [k, v.toFixed(2)])
            )
        });
        console.log('');

        // Teste 5: Aprendizado de padr√µes (simula√ß√£o)
        console.log('üéØ Teste 5: Simula√ß√£o de aprendizado de padr√µes');
        
        // Simula v√°rias decis√µes similares
        for (let i = 0; i < 5; i++) {
            const decision = await engine.evaluate('routine-analysis', {
                complexity: 7,
                type: 'problem_analysis'
            });
            // Simula feedback positivo
            if (decision.metadata && decision.metadata.decisionId) {
                engine.markDecisionOutcome(decision.metadata.decisionId, true);
            }
        }
        
        // Testa se o padr√£o foi aprendido
        const learnedDecision = await engine.evaluate('routine-analysis', {
            complexity: 7,
            type: 'problem_analysis'
        });
        console.log('‚úÖ Decis√£o ap√≥s aprendizado:', {
            system: learnedDecision.system,
            confidence: learnedDecision.confidence.toFixed(2),
            reasoning: learnedDecision.reasoning
        });
        console.log('');

        // Teste 6: Estat√≠sticas avan√ßadas
        console.log('üìà Teste 6: Estat√≠sticas avan√ßadas');
        const stats = engine.getAdvancedStats();
        console.log('‚úÖ Estat√≠sticas:', {
            totalDecisions: stats.performance.totalDecisions,
            averageConfidence: stats.performance.averageConfidence.toFixed(2),
            systemUsage: stats.performance.systemUsage,
            learningPatterns: stats.learningPatterns.totalPatterns,
            highConfidencePatterns: stats.learningPatterns.highConfidencePatterns
        });
        console.log('');

        // Teste 7: Cen√°rios de handoff autom√°tico
        console.log('üîÄ Teste 7: Cen√°rios de handoff autom√°tico');
        
        const handoffScenarios = [
            {
                operation: 'simple-task',
                context: { complexity: 2, type: 'task_organization' },
                expectedSystem: 'taskmaster'
            },
            {
                operation: 'complex-analysis',
                context: { complexity: 9, type: 'problem_analysis' },
                expectedSystem: 'sequential'
            },
            {
                operation: 'strategic-planning',
                context: { complexity: 6, type: 'comprehensive_analysis' },
                expectedSystem: 'hybrid'
            }
        ];

        let correctHandoffs = 0;
        for (const scenario of handoffScenarios) {
            const decision = await engine.evaluate(scenario.operation, scenario.context);
            const isCorrect = decision.system === scenario.expectedSystem;
            if (isCorrect) correctHandoffs++;
            
            console.log(`  ${isCorrect ? '‚úÖ' : '‚ùå'} ${scenario.operation}: ${decision.system} (esperado: ${scenario.expectedSystem})`);
        }
        
        console.log(`‚úÖ Handoffs corretos: ${correctHandoffs}/${handoffScenarios.length}`);
        console.log('');

        // Teste 8: Export/Import de configura√ß√£o
        console.log('üíæ Teste 8: Export/Import de configura√ß√£o');
        const exportedConfig = engine.exportConfiguration();
        console.log('‚úÖ Configura√ß√£o exportada:', {
            hasRules: !!exportedConfig.rules,
            hasPriorityMatrix: !!exportedConfig.priorityMatrix,
            learningPatternsCount: exportedConfig.learningPatterns.length,
            exportedAt: exportedConfig.exportedAt
        });

        // Cria nova inst√¢ncia e importa configura√ß√£o
        const newEngine = new AdvancedRulesEngine();
        newEngine.importConfiguration(exportedConfig);
        
        const importTestDecision = await newEngine.evaluate('test-import', {
            complexity: 5,
            type: 'problem_analysis'
        });
        console.log('‚úÖ Teste ap√≥s import:', {
            system: importTestDecision.system,
            confidence: importTestDecision.confidence.toFixed(2)
        });
        console.log('');

        // Resumo dos Testes
        console.log('üìà RESUMO DOS TESTES AVAN√áADOS');
        console.log('===============================');
        console.log('‚úÖ Scoring multi-dimensional: OK');
        console.log('‚úÖ Decis√µes baseadas em complexidade: OK');
        console.log('‚úÖ Opera√ß√µes h√≠bridas: OK');
        console.log('‚úÖ Prioriza√ß√£o avan√ßada: OK');
        console.log('‚úÖ Aprendizado de padr√µes: OK');
        console.log('‚úÖ Estat√≠sticas avan√ßadas: OK');
        console.log('‚úÖ Handoff autom√°tico: OK');
        console.log('‚úÖ Export/Import configura√ß√£o: OK');
        console.log('');
        console.log('üéâ Todos os testes avan√ßados passaram! Advanced Rules Engine funcionando perfeitamente.');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes avan√ßados:', error);
        return false;
    }
}

// Executa os testes se o script for chamado diretamente
if (require.main === module) {
    testAdvancedRules()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå Erro fatal:', error);
            process.exit(1);
        });
}

module.exports = { testAdvancedRules };
